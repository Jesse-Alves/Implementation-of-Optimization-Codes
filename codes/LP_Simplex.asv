%%  Jesse Alves and Luis Villamarin
%function [f,x,B] = LP_Simplex(A,b,c,v)
clear all; clc;

%% Test values
A = [1 5 1 0 0; 
       2 1 0 1 0; 
       1 1 0 0 1];

b = [40 20 12]';
c = [-3 -5 0 0 0]';
v = [3 4 5];

%% Obtain dimentions
[n,m] = size(A);
base_size = length(v);
b_size = length(b);
c_size = length(c);

%% Create A augmented 
Aa = [A b;c' 0];
[N,M] = size(Aa);

%% Loop
%     %% Computing the number of possible solitions
%     C = nchoosek(num_vector,num_eq); %The matrix with all possible combinations
%     iter = length(C);
%     
%     %% A loop to find every basic feasible solitions
%     

% Number of possible iterations
iter = nchoosek(m,b_size);

for k = 1:iter

    % Basis
    B = Aa(1:end-1,[v]);
    
    % Chosing the r index
    r_index = find(Aa(N,1:end-1)~=0);

    %% Finding the r
    ii = 1;
    for i=r_index
        y_temp = Aa(1:end-1,i);
        c_temp = c([v]);   
    
        r(ii) = c(i) - (c_temp')*y_temp;
        ii = ii+1;
    end
    r
    stop = 1;
    %% Check if the minimizer was found
    if any(r<0) 
        q = find(r == min(r));    
        y_iq =  A(:,q);
    
        if any(y_iq > 0)  
            
            %% Gauss Elimination
            % Finding the p
            piv = Aa(1:end-1,end) ./ y_iq;
            p = find(piv == min(piv));
            pivot = Aa(p,q)
           
            for linha = 1 : N
                for coluna = 1 : M
                    if linha ~= p
                        Aa_new(linha,coluna) = Aa(linha,coluna) - (Aa(linha,q)/pivot)*Aa(p,coluna); %Aa(p,q)
                         Aa_new(linha,coluna);
                    else
                        Aa_new(linha,coluna) = Aa(linha,coluna)/pivot; %Aa(p,q)
                         Aa_new(linha,coluna);
                    end
                end
            end
            
            % Update the 
            Aa = Aa_new
            %q = I;
            %elements = canonical_tableau(1:(m_tableau-1),n_tableau)./canonical_tableau(1:(m_tableau-1),q);
            %[~,p] = min(elements);

              
            
%             line_pivot_previous =  Aa(p,:)
%             line = Aa(p,:)/pivot       
%     
%             Aa = Aa - line     
%             Aa(N,:) = Aa(N,:) + line
%             Aa(p,:) = line
%          
%             %Adjust the c vector
%             number = -Aa(N,q)/pivot
%             Aa(N,:) = Aa(N,:) + number*line_pivot_previous 

            %c = Aa(N,1:c_size);

            % Update v     
            v(p) = q;

           % Find x
            x = zeros(1,m);
            x([v]) = Aa(1:b_size,M);
    
            % Find f
            f = -Aa(N,M);      
        else
            % Stop, the problem is unbounded!!
            disp('Error - the problem is unbounded')
            return
        end

    else
        %Stop, because I found the minimizer
        B = v;
        f = -Aa(N,M);
        x([v]) = Aa(1:b_size,M);         
        return
    end

end










%end